#!/usr/bin/env python3

from typing import Iterable, Callable, Any, TypeVar, Iterator

T = TypeVar('T')


def identity(item: T) -> T:
    """
    Identity function

    :param item: Item to process
    :return: Given item

    >>> print(identity(42))
    42
    >>> print(identity([1, 2, 3, 4, 5]))
    [1, 2, 3, 4, 5]
    >>> print(identity("hello world"))
    hello world
    """
    return item


def first_with_given_key(iterable: Iterable[T], key: Callable[[T], Any] = None) -> Iterator[T]:
    """
    Generates items with key appears at the first time

    :param iterable: Some iterable produces items to process
    :param key: Function produces keys for items from iterable
    :return: Generator of items with key (generated by key function) appears at the first time

    Tests:
    >>> print(tuple(first_with_given_key([[1],[2,3],[4],[5,6,7],[8,9]], key = len)))
    ([1], [2, 3], [5, 6, 7])
    >>> print(tuple(first_with_given_key([[1],[2,3],[1],[5,6,7],[2,3]])))
    ([1], [2, 3], [5, 6, 7])
    >>> print(list(first_with_given_key("abcdabcdxyz")))
    ['a', 'b', 'c', 'd', 'x', 'y', 'z']
    """
    # Default value for key function
    if key is None:
        key = identity

    # Set of keys already appeared in iterable
    appeared_keys = set()

    for item in iterable:
        # generated_key = key(item) if isinstance(item, Hashable) else repr(key(item))
        generated_key = key(item)
        if not generated_key.__hash__:
            generated_key = repr(generated_key)

        if generated_key not in appeared_keys:
            appeared_keys.add(generated_key)
            yield item


if __name__ == "__main__":
    import doctest

    doctest.testmod()
